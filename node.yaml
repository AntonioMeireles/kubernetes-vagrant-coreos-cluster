#cloud-config

---
write-files:
  - path: /etc/conf.d/nfs
    permissions: '0644'
    content: |
      OPTS_RPC_MOUNTD=""
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && [ -n "$2" ] && while ! curl --output /dev/null \
        --silent --head --fail \
        http://${1}:${2}; do sleep 1 && echo -n .; done;
      exit $?
coreos:
  fleet:
    public-ip: $public_ipv4
    etcd-servers: http://$private_ipv4:2379
    metadata: "role=minion"
  flannel:
    interface: eth1

  units:
    - name: rpcbind.service
      command: start
    - name: rpc-statd.service
      command: start
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: etcd.service
      command: start
      content: |
        [Unit]
        Description=etcd 2.0
        Requires=early-docker.service
        After=early-docker.service
        Before=early-docker.target

        [Service]
        Restart=always
        RestartSec=5
        Environment="TMPDIR=/var/tmp/"
        Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
        Environment="ETCD_VER=v2.0.9"
        EnvironmentFile=/etc/environment
        TimeoutStartSec=0
        SyslogIdentifier=writer_process
        LimitNOFILE=40000
        ExecStartPre=-/usr/bin/docker kill etcd
        ExecStartPre=-/usr/bin/docker rm etcd
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/etcd:${ETCD_VER}
        ExecStart=/bin/bash -c "/usr/bin/docker run \
            --net=host \
            -p 2379:2379 \
            -p 2380:2380 \
            -p 4001:4001 \
            -p 7001:7001 \
            --name etcd \
            -v /opt/etcd:/opt/etcd \
            -v /usr/share/ca-certificates/:/etc/ssl/certs \
            quay.io/coreos/etcd:${ETCD_VER} \
            -data-dir /opt/etcd \
            -name __NAME__ \
            -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
            -advertise-client-urls http://$COREOS_PRIVATE_IPV4:2379,http://$COREOS_PRIVATE_IPV4:4001 \
            -initial-cluster-token k8s_etcd \
            -listen-peer-urls http://0.0.0.0:2380 \
            -initial-advertise-peer-urls http://$COREOS_PRIVATE_IPV4:2380 \
            -initial-cluster __ETCD_SEED_CLUSTER__ \
            -initial-cluster-state new"
        ExecStop=/usr/bin/docker kill etcd

        [X-Fleet]
        Conflicts=etcd*
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'
    - name: fleet.service
      command: start
    - name: docker.service
      command: start
      drop-ins:
        - name: 51-docker-mirror.conf
          content: |
            [Unit]
            # making sure that flanneld finished startup, otherwise containers
            # won't land in flannel's network...
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            ExecStartPre=/opt/bin/wupiao __MASTER_IP__ 5000
            Environment=DOCKER_OPTS='--registry-mirror=http://__MASTER_IP__:5000'
    - name: rpc-statd.service
      command: start
      enable: true
    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service
        After=setup-network-environment.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__RELEASE__/bin/linux/amd64/kube-proxy
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy
        # wait for kubernetes master to be up and ready
        ExecStartPre=/opt/bin/wupiao __MASTER_IP__ 8080
        ExecStart=/opt/bin/kube-proxy \
          --master=http://__MASTER_IP__:8080 \
          --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service
        After=setup-network-environment.service

        [Service]
        EnvironmentFile=/etc/network-environment
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__RELEASE__/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
        # wait for kubernetes master to be up and ready
        ExecStartPre=/opt/bin/wupiao __MASTER_IP__ 8080
        ExecStart=/opt/bin/kubelet \
          --address=0.0.0.0 \
          --port=10250 \
          --hostname_override=$public_ipv4 \
          --api_servers=__MASTER_IP__:8080 \
          --allow_privileged=true \
          --cluster_dns=10.100.0.10 \
          --cluster_domain=k8s \
          --logtostderr=true \
          --config=/opt/kubernetes/manifests/ \
          --cadvisor_port=4194 \
          --port=10250 \
          --healthz_bind_address=0.0.0.0 \
          --healthz_port=10248
        Restart=always
        RestartSec=10
  update:
    group: __CHANNEL__
    reboot-strategy: off
